version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: truck-monitoring-db
    environment:
      POSTGRES_DB: truck_monitoring
      POSTGRES_USER: truck_user
      POSTGRES_PASSWORD: truck_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U truck_user -d truck_monitoring"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: truck-monitoring-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Backend API with OCR Service
  backend:
    build:
      context: .
      target: production
    container_name: truck-monitoring-backend
    environment:
      # Database
      DATABASE_URL: postgresql://truck_user:truck_password@postgres:5432/truck_monitoring
      
      # Redis
      REDIS_URL: redis://redis:6379
      
      # Server
      NODE_ENV: production
      PORT: 3001
      
      # JWT
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
      
      # AWS S3 Configuration
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION:-us-east-1}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      
      # Google Cloud Vision API
      GOOGLE_CLOUD_PROJECT_ID: ${GOOGLE_CLOUD_PROJECT_ID}
      GOOGLE_CLOUD_KEY_FILE: /app/config/gcp-service-account.json
      
      # OCR Configuration
      OCR_CONFIDENCE_THRESHOLD: ${OCR_CONFIDENCE_THRESHOLD:-0.8}
      OCR_MAX_RETRIES: ${OCR_MAX_RETRIES:-2}
      OCR_TIMEOUT_MS: ${OCR_TIMEOUT_MS:-30000}
      
      # CORS
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    volumes:
      # Mount Google Cloud service account key
      - ${GOOGLE_CLOUD_KEY_FILE_PATH:-./config/gcp-service-account.json}:/app/config/gcp-service-account.json:ro
      # Mount logs directory
      - ./logs:/app/logs
      # Mount temp directory for OCR processing
      - ./temp:/app/temp
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Frontend (React app)
  frontend:
    build:
      context: ../frontend
      dockerfile: Dockerfile
    container_name: truck-monitoring-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001/api
    ports:
      - "3000:80"
    depends_on:
      - backend
    restart: unless-stopped

  # Nginx (Optional: Reverse proxy and load balancer)
  nginx:
    image: nginx:alpine
    container_name: truck-monitoring-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  default:
    name: truck-monitoring-network
