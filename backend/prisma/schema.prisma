// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      UserRole @default(DRIVER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  driverProfile         DriverProfile?
  assignedTrucks        Truck[]                  @relation("TruckDriver")
  ownedTrucks           Truck[]                  @relation("TruckOwner")
  trips                 Trip[]
  uploadedReceipts      Receipt[]                @relation("ReceiptUploader")
  approvedReceipts      Receipt[]                @relation("ReceiptApprover")
  expenses              Expense[]
  invoices              Invoice[]
  auditLogs             AuditLog[]
  maintenanceRecords    MaintenanceRecord[]
  refreshTokens         RefreshToken[]
  notifications         Notification[]
  notificationPreferences NotificationPreference?
  reviewedAnomalies     AnomalyRecord[]

  @@map("users")
}

// Refresh Token model for JWT token management
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  isRevoked Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

// Role enum
enum UserRole {
  ADMIN
  MANAGER
  DRIVER
}

// Driver profile with additional driver-specific information
model DriverProfile {
  id               String       @id @default(cuid())
  userId           String       @unique
  licenseNumber    String       @unique
  licenseExpiry    DateTime
  licenseClass     String       // CDL class
  contactNumber    String
  emergencyContact String?
  address          String?
  dateOfBirth      DateTime?
  hireDate         DateTime     @default(now())
  status           DriverStatus @default(ACTIVE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips Trip[]

  @@map("driver_profiles")
}

// Driver status enum
enum DriverStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

// Truck model
model Truck {
  id            String      @id @default(cuid())
  licensePlate  String      @unique
  make          String
  model         String
  year          Int
  vin           String?     @unique
  capacity      Float?      // in tons
  fuelType      FuelType    @default(DIESEL)
  mileage       Float?      // current mileage
  status        TruckStatus @default(AVAILABLE)
  driverId      String?     // current assigned driver
  ownerId       String      // truck owner/manager
  insuranceInfo Json?       // insurance details as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  driver             User?               @relation("TruckDriver", fields: [driverId], references: [id])
  owner              User                @relation("TruckOwner", fields: [ownerId], references: [id])
  trips              Trip[]
  maintenanceRecords MaintenanceRecord[]
  receipts           Receipt[]
  expenses           Expense[]
  
  // IFTA Relations
  iftaFuelPurchases  IFTAFuelPurchase[]

  @@map("trucks")
}

// Truck enums
enum FuelType {
  DIESEL
  PETROL
  ELECTRIC
  HYBRID
}

enum TruckStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
}

// Trip model
model Trip {
  id                 String     @id @default(cuid())
  tripNumber         String     @unique @default(cuid())
  truckId            String
  driverId           String
  driverProfileId    String
  startLocation      String
  endLocation        String
  scheduledStartTime DateTime
  actualStartTime    DateTime?
  scheduledEndTime   DateTime?
  actualEndTime      DateTime?
  estimatedDistance  Float?     // in kilometers
  actualDistance     Float?
  status             TripStatus @default(SCHEDULED)
  notes              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  truck         Truck         @relation(fields: [truckId], references: [id])
  driver        User          @relation(fields: [driverId], references: [id])
  driverProfile DriverProfile @relation(fields: [driverProfileId], references: [id])
  receipts      Receipt[]
  expenses      Expense[]
  
  // IFTA Relations
  iftaSegments  IFTATripSegment[]
  iftaFuelPurchases IFTAFuelPurchase[]

  @@map("trips")
}

// Trip status enum
enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

// Receipt model for uploaded receipts
model Receipt {
  id              String           @id @default(cuid())
  fileName        String
  filePath        String
  fileSize        Int
  mimeType        String
  amount          Float?
  currency        String           @default("USD")
  description     String?
  category        ExpenseCategory?
  receiptDate     DateTime?
  status          ReceiptStatus    @default(PENDING)
  tripId          String?          // optional - receipts can exist without trips
  uploadedById    String
  approvedById    String?
  approvedAt      DateTime?
  rejectionReason String?
  metadata        Json?            // additional receipt data from OCR
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  trip       Trip?  @relation(fields: [tripId], references: [id])
  uploadedBy User   @relation("ReceiptUploader", fields: [uploadedById], references: [id])
  approvedBy User?  @relation("ReceiptApprover", fields: [approvedById], references: [id])
  truckId    String?
  truck      Truck? @relation(fields: [truckId], references: [id])
  anomalies  AnomalyRecord[]
  
  // IFTA Relations
  iftaFuelPurchase IFTAFuelPurchase?

  @@map("receipts")
}

// Receipt status enum
enum ReceiptStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

// Expense model for categorized expenses
model Expense {
  id          String          @id @default(cuid())
  amount      Float
  currency    String          @default("USD")
  category    ExpenseCategory
  description String
  expenseDate DateTime
  tripId      String?
  truckId     String?
  userId      String
  receiptUrl  String?         // link to receipt image
  status      ExpenseStatus   @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  tags        String[]        // for categorization
  metadata    Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  trip  Trip?  @relation(fields: [tripId], references: [id])
  truck Truck? @relation(fields: [truckId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@map("expenses")
}

// Expense category enum
enum ExpenseCategory {
  FUEL
  TOLL
  PARKING
  MAINTENANCE
  DELIVERY
  FOOD
  ACCOMMODATION
  MISC
}

// Expense status enum
enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
}

// Invoice model for billing
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  clientName    String
  clientEmail   String?
  amount        Float
  currency      String        @default("USD")
  description   String
  invoiceDate   DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  paidAt        DateTime?
  userId        String        // who created the invoice
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("invoices")
}

// Invoice status enum
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Audit log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  // who performed the action
  action    String   // what action was performed
  entity    String   // what entity was affected
  entityId  String   // ID of the affected entity
  oldValues Json?    // previous values
  newValues Json?    // new values
  ip        String?  // IP address
  userAgent String?  // browser/client info
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Maintenance records
model MaintenanceRecord {
  id            String            @id @default(cuid())
  truckId       String
  type          MaintenanceType
  description   String
  cost          Float?
  currency      String            @default("USD")
  scheduledDate DateTime
  completedDate DateTime?
  status        MaintenanceStatus @default(SCHEDULED)
  performedBy   String?           // mechanic/service provider
  userId        String            // who scheduled/reported
  notes         String?
  nextDueDate   DateTime?
  mileage       Float?            // truck mileage at time of maintenance
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  truck Truck @relation(fields: [truckId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("maintenance_records")
}

// Maintenance enums
enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
  EMERGENCY
  PREVENTIVE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}

// Notification system models
model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  title     String
  message   String
  payload   Json?            // Additional data specific to notification type
  read      Boolean          @default(false)
  readAt    DateTime?
  userId    String
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, read])
  @@index([createdAt])
  @@map("notifications")
}

model NotificationPreference {
  id                    String  @id @default(cuid())
  userId                String  @unique
  emailEnabled          Boolean @default(true)
  pushEnabled           Boolean @default(true)
  receiptApproved       Boolean @default(true)
  receiptRejected       Boolean @default(true)
  tripAssigned          Boolean @default(true)
  anomalyDetected       Boolean @default(true)
  maintenanceReminder   Boolean @default(true)
  invoiceGenerated      Boolean @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notification_preferences")
}

model EmailTemplate {
  id          String           @id @default(cuid())
  type        NotificationType
  subject     String
  htmlContent String
  textContent String?
  variables   Json?            // Available template variables
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@unique([type])
  @@map("email_templates")
}

enum NotificationType {
  RECEIPT_APPROVED
  RECEIPT_REJECTED
  TRIP_ASSIGNED
  TRIP_COMPLETED
  ANOMALY_DETECTED
  MAINTENANCE_DUE
  MAINTENANCE_COMPLETED
  INVOICE_GENERATED
  SYSTEM_ALERT
  ACCOUNT_UPDATE
}

enum AnomalySeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AnomalyType {
  EXCESSIVE_AMOUNT
  DUPLICATE_RECEIPT
  OUTSIDE_TRIP_DATES
  SUSPICIOUS_MERCHANT
  FREQUENT_SUBMISSIONS
  INVALID_CATEGORY
  UNUSUAL_TIMING
}

enum AnomalyStatus {
  DETECTED
  REVIEWED
  RESOLVED
  FALSE_POSITIVE
}

// Anomaly Record model for tracking detected anomalies
model AnomalyRecord {
  id          String         @id @default(cuid())
  receiptId   String
  ruleId      String
  ruleName    String
  type        AnomalyType
  severity    AnomalySeverity
  description String
  details     String         // JSON serialized details
  confidence  Float          // 0-1 confidence score
  status      AnomalyStatus  @default(DETECTED)
  reviewedBy  String?
  reviewedAt  DateTime?
  resolution  String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // Relations
  receipt     Receipt        @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  reviewer    User?          @relation(fields: [reviewedBy], references: [id])

  @@index([receiptId])
  @@index([type, severity])
  @@index([status])
  @@index([createdAt])
  @@map("anomaly_records")
}

// IFTA (International Fuel Tax Agreement) Models

// IFTA Trip Segments - tracks miles driven in each state
model IFTATripSegment {
  id           String   @id @default(cuid())
  tripId       String
  state        String   // 2-letter state code
  miles        Float    // miles driven in this state
  startMileage Float    // odometer reading at state entry
  endMileage   Float    // odometer reading at state exit
  entryPoint   String?  // entry location/city
  exitPoint    String?  // exit location/city
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  trip         Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@index([tripId])
  @@index([state])
  @@index([createdAt])
  @@map("ifta_trip_segments")
}

// IFTA Fuel Purchases - enhanced fuel expense tracking
model IFTAFuelPurchase {
  id             String   @id @default(cuid())
  receiptId      String   @unique
  tripId         String?
  truckId        String
  state          String   // 2-letter state code where fuel was purchased
  gallons        Float    // gallons purchased
  pricePerGallon Float    // price per gallon
  totalAmount    Float    // total purchase amount
  taxPaid        Float    // fuel tax paid at purchase
  purchaseDate   DateTime // date of fuel purchase
  location       String   // purchase location
  vendor         String?  // fuel vendor/station
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  receipt        Receipt  @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  trip           Trip?    @relation(fields: [tripId], references: [id], onDelete: SetNull)
  truck          Truck    @relation(fields: [truckId], references: [id])

  @@index([receiptId])
  @@index([tripId])
  @@index([truckId])
  @@index([state])
  @@index([purchaseDate])
  @@map("ifta_fuel_purchases")
}

// IFTA Quarterly Reports
model IFTAQuarterlyReport {
  id             String             @id @default(cuid())
  companyId      String?            // company/fleet identifier
  year           Int
  quarter        IFTAQuarter
  totalMiles     Float              @default(0)
  totalGallons   Float              @default(0)
  netTaxDue      Float              @default(0)
  netRefundDue   Float              @default(0)
  filingStatus   IFTAFilingStatus   @default(DRAFT)
  submittedDate  DateTime?
  dueDate        DateTime
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt

  // Relations
  jurisdictions  IFTAJurisdictionData[]

  @@unique([companyId, year, quarter])
  @@index([year, quarter])
  @@index([filingStatus])
  @@index([dueDate])
  @@map("ifta_quarterly_reports")
}

// IFTA Jurisdiction Data - detailed breakdown by state
model IFTAJurisdictionData {
  id               String              @id @default(cuid())
  reportId         String
  state            String              // 2-letter state code
  totalMiles       Float               @default(0)
  taxPaidGallons   Float               @default(0)
  taxFreeGallons   Float               @default(0)
  computedGallons  Float               @default(0)
  averageMPG       Float               @default(6.5)
  taxRate          Float               // tax rate per gallon
  grossTax         Float               @default(0)
  netTax           Float               @default(0)
  fuelTaxPaid      Float               @default(0)
  taxDue           Float               @default(0)
  refundDue        Float               @default(0)
  createdAt        DateTime            @default(now())
  updatedAt        DateTime            @updatedAt

  // Relations
  report           IFTAQuarterlyReport @relation(fields: [reportId], references: [id], onDelete: Cascade)

  @@unique([reportId, state])
  @@index([reportId])
  @@index([state])
  @@map("ifta_jurisdiction_data")
}

// IFTA State Tax Rates - historical tracking of tax rates
model IFTAStateTaxRate {
  id             String   @id @default(cuid())
  state          String   // 2-letter state code
  rate           Float    // tax rate per gallon
  effectiveDate  DateTime // when this rate became effective
  endDate        DateTime? // when this rate expired (null if current)
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([state, effectiveDate])
  @@index([state, isActive])
  @@index([effectiveDate])
  @@map("ifta_state_tax_rates")
}

// IFTA Enums
enum IFTAQuarter {
  Q1
  Q2
  Q3
  Q4
}

enum IFTAFilingStatus {
  DRAFT
  SUBMITTED
  APPROVED
  REJECTED
  AMENDED
}
