// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model with role-based access
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  avatar    String?
  role      UserRole @default(DRIVER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  driverProfile      DriverProfile?
  assignedTrucks     Truck[]        @relation("TruckDriver")
  ownedTrucks        Truck[]        @relation("TruckOwner")
  trips              Trip[]
  uploadedReceipts   Receipt[]      @relation("ReceiptUploader")
  approvedReceipts   Receipt[]      @relation("ReceiptApprover")
  expenses           Expense[]
  invoices           Invoice[]
  auditLogs          AuditLog[]
  maintenanceRecords MaintenanceRecord[]

  @@map("users")
}

// Role enum
enum UserRole {
  ADMIN
  MANAGER
  DRIVER
}

// Driver profile with additional driver-specific information
model DriverProfile {
  id               String       @id @default(cuid())
  userId           String       @unique
  licenseNumber    String       @unique
  licenseExpiry    DateTime
  licenseClass     String       // CDL class
  contactNumber    String
  emergencyContact String?
  address          String?
  dateOfBirth      DateTime?
  hireDate         DateTime     @default(now())
  status           DriverStatus @default(ACTIVE)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  trips Trip[]

  @@map("driver_profiles")
}

// Driver status enum
enum DriverStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

// Truck model
model Truck {
  id            String      @id @default(cuid())
  licensePlate  String      @unique
  make          String
  model         String
  year          Int
  vin           String?     @unique
  capacity      Float?      // in tons
  fuelType      FuelType    @default(DIESEL)
  mileage       Float?      // current mileage
  status        TruckStatus @default(AVAILABLE)
  driverId      String?     // current assigned driver
  ownerId       String      // truck owner/manager
  insuranceInfo Json?       // insurance details as JSON
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  // Relations
  driver             User?               @relation("TruckDriver", fields: [driverId], references: [id])
  owner              User                @relation("TruckOwner", fields: [ownerId], references: [id])
  trips              Trip[]
  maintenanceRecords MaintenanceRecord[]
  receipts           Receipt[]
  expenses           Expense[]

  @@map("trucks")
}

// Truck enums
enum FuelType {
  DIESEL
  PETROL
  ELECTRIC
  HYBRID
}

enum TruckStatus {
  AVAILABLE
  IN_USE
  MAINTENANCE
  OUT_OF_SERVICE
}

// Trip model
model Trip {
  id                 String     @id @default(cuid())
  tripNumber         String     @unique @default(cuid())
  truckId            String
  driverId           String
  driverProfileId    String
  startLocation      String
  endLocation        String
  scheduledStartTime DateTime
  actualStartTime    DateTime?
  scheduledEndTime   DateTime?
  actualEndTime      DateTime?
  estimatedDistance  Float?     // in kilometers
  actualDistance     Float?
  status             TripStatus @default(SCHEDULED)
  notes              String?
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt

  // Relations
  truck         Truck         @relation(fields: [truckId], references: [id])
  driver        User          @relation(fields: [driverId], references: [id])
  driverProfile DriverProfile @relation(fields: [driverProfileId], references: [id])
  receipts      Receipt[]
  expenses      Expense[]

  @@map("trips")
}

// Trip status enum
enum TripStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  DELAYED
}

// Receipt model for uploaded receipts
model Receipt {
  id              String           @id @default(cuid())
  fileName        String
  filePath        String
  fileSize        Int
  mimeType        String
  amount          Float?
  currency        String           @default("USD")
  description     String?
  category        ExpenseCategory?
  receiptDate     DateTime?
  status          ReceiptStatus    @default(PENDING)
  tripId          String?          // optional - receipts can exist without trips
  uploadedById    String
  approvedById    String?
  approvedAt      DateTime?
  rejectionReason String?
  metadata        Json?            // additional receipt data from OCR
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  trip       Trip?  @relation(fields: [tripId], references: [id])
  uploadedBy User   @relation("ReceiptUploader", fields: [uploadedById], references: [id])
  approvedBy User?  @relation("ReceiptApprover", fields: [approvedById], references: [id])
  truckId    String?
  truck      Truck? @relation(fields: [truckId], references: [id])

  @@map("receipts")
}

// Receipt status enum
enum ReceiptStatus {
  PENDING
  APPROVED
  REJECTED
  PROCESSING
}

// Expense model for categorized expenses
model Expense {
  id          String          @id @default(cuid())
  amount      Float
  currency    String          @default("USD")
  category    ExpenseCategory
  description String
  expenseDate DateTime
  tripId      String?
  truckId     String?
  userId      String
  receiptUrl  String?         // link to receipt image
  status      ExpenseStatus   @default(PENDING)
  approvedAt  DateTime?
  approvedBy  String?
  tags        String[]        // for categorization
  metadata    Json?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  trip  Trip?  @relation(fields: [tripId], references: [id])
  truck Truck? @relation(fields: [truckId], references: [id])
  user  User   @relation(fields: [userId], references: [id])

  @@map("expenses")
}

// Expense category enum
enum ExpenseCategory {
  FUEL
  TOLL
  PARKING
  MAINTENANCE
  DELIVERY
  FOOD
  ACCOMMODATION
  MISC
}

// Expense status enum
enum ExpenseStatus {
  PENDING
  APPROVED
  REJECTED
  REIMBURSED
}

// Invoice model for billing
model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  clientName    String
  clientEmail   String?
  amount        Float
  currency      String        @default("USD")
  description   String
  invoiceDate   DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  paidAt        DateTime?
  userId        String        // who created the invoice
  metadata      Json?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@map("invoices")
}

// Invoice status enum
enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

// Audit log for tracking changes
model AuditLog {
  id        String   @id @default(cuid())
  userId    String?  // who performed the action
  action    String   // what action was performed
  entity    String   // what entity was affected
  entityId  String   // ID of the affected entity
  oldValues Json?    // previous values
  newValues Json?    // new values
  ip        String?  // IP address
  userAgent String?  // browser/client info
  createdAt DateTime @default(now())

  // Relations
  user User? @relation(fields: [userId], references: [id])

  @@map("audit_logs")
}

// Maintenance records
model MaintenanceRecord {
  id            String            @id @default(cuid())
  truckId       String
  type          MaintenanceType
  description   String
  cost          Float?
  currency      String            @default("USD")
  scheduledDate DateTime
  completedDate DateTime?
  status        MaintenanceStatus @default(SCHEDULED)
  performedBy   String?           // mechanic/service provider
  userId        String            // who scheduled/reported
  notes         String?
  nextDueDate   DateTime?
  mileage       Float?            // truck mileage at time of maintenance
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt

  // Relations
  truck Truck @relation(fields: [truckId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("maintenance_records")
}

// Maintenance enums
enum MaintenanceType {
  ROUTINE
  REPAIR
  INSPECTION
  EMERGENCY
  PREVENTIVE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  OVERDUE
}
